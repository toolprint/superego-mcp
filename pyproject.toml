[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "superego-mcp"
dynamic = ["version"]
description = "Intelligent tool-call review system for AI agents"
requires-python = ">=3.11"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Brian Cripe", email = "brian@onegrep.dev" },
]
keywords = [
    "ai",
    "mcp",
    "security", 
    "tool-filtering",
    "claude-code",
    "hooks",
    "agent-safety",
    "llm-safety",
    "inference-control",
    "rule-engine",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Monitoring",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Environment :: Console",
    "Typing :: Typed",
]
dependencies = [
    "fastmcp>=2.0.0", # MCP server framework with sampling support
    "pydantic>=2.0.0", # Data validation and domain models
    "pyyaml>=6.0", # Configuration file parsing
    "watchfiles>=0.20.0", # File system monitoring for hot-reload
    "jinja2>=3.1.0", # Secure prompt templating
    "httpx>=0.25.0", # HTTP client for AI services
    "structlog>=23.0.0", # Structured logging
    "psutil>=5.9.0", # System metrics for health checks
    "fastapi>=0.104.0", # FastAPI for HTTP and WebSocket transports
    "uvicorn[standard]>=0.24.0", # ASGI server for FastAPI
    "jsonpath-ng>=1.6.0", # JSONPath expression support
    "python-dateutil>=2.8.0", # Time-based rule evaluation
    "prometheus-client>=0.19.0", # Prometheus metrics export
    "aiohttp>=3.9.0", # HTTP server for monitoring dashboard
    "aiohttp-sse>=2.1.0", # Server-sent events for real-time metrics
    "docker>=7.1.0",
    "requests>=2.32.4",
]

[project.optional-dependencies]
# Core dependencies for evaluation mode only
core = [
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "structlog>=23.0.0",
    "jsonpath-ng>=1.6.0",
]

# Full server dependencies
server = [
    "fastmcp>=2.0.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "watchfiles>=0.20.0",
    "psutil>=5.9.0",
    "prometheus-client>=0.19.0",
    "aiohttp>=3.9.0",
    "aiohttp-sse>=2.1.0",
]

# CLI and development tools
cli = [
    "httpx>=0.25.0",
    "python-dateutil>=2.8.0",
]

# All features
all = [
    "fastmcp>=2.0.0",
    "fastapi>=0.104.0", 
    "uvicorn[standard]>=0.24.0",
    "watchfiles>=0.20.0",
    "psutil>=5.9.0",
    "prometheus-client>=0.19.0",
    "aiohttp>=3.9.0",
    "aiohttp-sse>=2.1.0",
    "httpx>=0.25.0",
    "python-dateutil>=2.8.0",
]

# Demo and testing
demo = [
    "fast-agent-mcp>=0.1.0",    # Demo client for sampling testing
]

# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-cov>=4.1.0",
    "pytest-timeout>=2.1.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "types-PyYAML>=6.0.0",
    "types-psutil>=7.0.0.20250801",
    "types-python-dateutil>=2.9.0.20250809",
]

# Container testing dependencies
container-test = [
    "docker>=7.0.0",           # Docker Python API for container management
    "requests>=2.31.0",        # HTTP client for container API testing
    "pytest>=7.4.0",           # Testing framework
    "pytest-asyncio>=0.21.0",  # Async test support
    "pytest-timeout>=2.1.0",   # Test timeout handling
]

[project.scripts]
# Unified CLI interface (primary)
superego = "superego_mcp.cli:main"

# Legacy entry points (maintained for backward compatibility)
superego-mcp = "superego_mcp.main:cli_main"
superego-eval = "superego_mcp.cli_eval:main"

[project.urls]
Homepage = "https://github.com/toolprint/superego-mcp"
Repository = "https://github.com/toolprint/superego-mcp"
Issues = "https://github.com/toolprint/superego-mcp/issues"
Documentation = "https://github.com/toolprint/superego-mcp/blob/main/README.md"
Changelog = "https://github.com/toolprint/superego-mcp/releases"
"Source Code" = "https://github.com/toolprint/superego-mcp"
"Bug Reports" = "https://github.com/toolprint/superego-mcp/issues"
"Feature Requests" = "https://github.com/toolprint/superego-mcp/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/superego_mcp"]
# Include all runtime assets and configuration files in the wheel
include = [
    # Core Python package
    "src/superego_mcp/**/*.py",
    
    # Configuration files
    "src/superego_mcp/**/*.yaml", 
    "src/superego_mcp/**/*.yml",
    "src/superego_mcp/**/*.json",
    
    # Static assets (CSS, JS, HTML, images)
    "src/superego_mcp/**/*.css",
    "src/superego_mcp/**/*.js", 
    "src/superego_mcp/**/*.html",
    "src/superego_mcp/**/*.png",
    "src/superego_mcp/**/*.svg",
    "src/superego_mcp/**/*.ico",
    
    # Template files
    "src/superego_mcp/**/*.jinja2",
    "src/superego_mcp/**/*.j2",
    
    # Compressed assets
    "src/superego_mcp/**/*.gz",
    
    # Build metadata and checksums
    "src/superego_mcp/_build_metadata.json",
    "src/superego_mcp/_asset_checksums.json",
    
    # External configuration files (copied by build hooks)
    "config/*.yaml",
    "config/*.yml",
    "demo/config/**/*.yaml",
    "demo/config/**/*.yml",
    "demo/config/**/*.json",
]
# Exclude unnecessary files from wheel
exclude = [
    "**/__pycache__/**",
    "**/*.pyc",
    "**/*.pyo",
    "**/.DS_Store",
    "**/Thumbs.db",
    "tests/**",
    "htmlcov/**",
    "dist/**",
    "build/**",
    "*.egg-info/**",
    
    # Exclude temporary build files
    "**/*.tmp",
    "**/*.bak",
    "**/.gitkeep",
]

[tool.hatch.build.hooks.custom]
path = "hatch_build.py"
# Custom build hook configuration for asset management
dependencies = [
    "pyyaml>=6.0",  # For configuration validation
]
# Hook runs for all build targets
require-runtime-dependencies = false

[tool.hatch.build.targets.sdist]
# Include all source files and assets in source distribution
include = [
    # Source code and package files
    "src/**",
    
    # Configuration and asset directories
    "config/**", 
    "demo/config/**",
    "static/**",
    "templates/**",
    
    # Test files for development
    "tests/**",
    
    # Documentation and project files
    "README.md",
    "pyproject.toml",
    "hatch_build.py",
    "justfile",
    "uv.lock",
    
    # License and changelog
    "LICENSE*",
    "CHANGELOG*",
    "HISTORY*",
]
exclude = [
    # Build artifacts
    "**/__pycache__/**",
    "**/*.pyc", 
    "**/*.pyo",
    "**/.DS_Store",
    "**/Thumbs.db",
    "dist/**",
    "build/**",
    "htmlcov/**",
    "*.egg-info/**",
    
    # Temporary and generated files
    "build_report.json",
    "src/superego_mcp/_build_metadata.json",
    "src/superego_mcp/_asset_checksums.json",
    "**/*.tmp",
    "**/*.bak",
    
    # IDE and editor files
    ".vscode/**",
    ".idea/**",
    "**/*.swp",
    "**/*.swo",
    "**/*~",
]

[tool.hatch.version]
path = "src/superego_mcp/__init__.py"

# Build configuration for asset management
[tool.hatch.build]
# Skip VCS ignore patterns for asset inclusion
skip-excluded-dirs = true

# Force include build metadata files
[tool.hatch.build.force-include]
"src/superego_mcp/_build_metadata.json" = "superego_mcp/_build_metadata.json"
"src/superego_mcp/_asset_checksums.json" = "superego_mcp/_asset_checksums.json"

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "fastmcp.*",
    "fast_agent_mcp.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=superego_mcp",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--strict-markers",
    "--timeout=60",
    "--timeout-method=thread",
]
env = [
    "TESTING=1",
    "PYTEST_CURRENT_TEST=1",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance benchmarks",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-timeout>=2.4.0",
    "types-psutil>=7.0.0.20250801",
    "types-python-dateutil>=2.9.0.20250809",
]
