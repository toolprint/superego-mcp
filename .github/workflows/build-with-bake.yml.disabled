name: Build with Docker Bake (2025 Best Practices)

on:
  push:
    branches: [main, develop, feat/python-mcp-docker]
    tags: [v*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      force_publish:
        description: 'Force publish to registry'
        required: false
        default: false
        type: boolean

# Required permissions for GHCR push
permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.12"

jobs:
  # Code quality and testing job
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version detection
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Install dependencies
      run: |
        uv sync --all-extras
    
    - name: Run linting
      run: |
        uv run ruff check src/ tests/
        uv run ruff format --check src/ tests/
    
    - name: Run type checking
      run: |
        uv run mypy src/
    
    - name: Run tests with coverage
      run: |
        uv run pytest --cov=superego_mcp --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.12'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # Multi-platform build using Docker Bake (2025 best practices)
  bake-build:
    name: Build Multi-Platform with Docker Bake
    runs-on: ubuntu-latest
    needs: test
    outputs:
      metadata: ${{ steps.meta.outputs.json }}
    
    steps:
    - name: Checkout code (optional - Bake can use git context directly)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up QEMU for multi-platform builds
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
        driver-opts: |
          network=host
        buildkitd-flags: |
          --allow-insecure-entitlement security.insecure
          --allow-insecure-entitlement network.host
        buildkitd-config: .github/buildkitd.toml
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,format=long
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push with Docker Bake
      uses: docker/bake-action@v5
      with:
        push: ${{ github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || inputs.force_publish) }}
        targets: production-all
        set: |
          *.cache-from=type=gha
          *.cache-to=type=gha,mode=max
        provenance: ${{ github.event_name != 'pull_request' }}
        sbom: ${{ github.event_name != 'pull_request' }}
      env:
        REGISTRY: ${{ env.REGISTRY }}
        IMAGE_NAME: ${{ env.IMAGE_NAME }}
        VERSION: ${{ steps.meta.outputs.version }}
        BUILD_DATE: ${{ steps.meta.outputs.created }}
        GIT_COMMIT: ${{ github.sha }}
        PUSH: ${{ github.event_name != 'pull_request' }}
        DOCKER_METADATA_TAGS: ${{ steps.meta.outputs.tags }}

  # Security scanning with Trivy
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: bake-build
    if: github.event_name != 'pull_request'
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'
        trivy-config: 'trivy.yaml'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Container validation
  container-test:
    name: Container Validation
    runs-on: ubuntu-latest
    needs: bake-build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
    
    - name: Test container startup (AMD64)
      run: |
        docker run --rm --platform linux/amd64 \
          -e SUPEREGO_CONFIG_PATH=/dev/null \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} \
          superego --version
    
    - name: Test container startup (ARM64)
      run: |
        docker run --rm --platform linux/arm64 \
          -e SUPEREGO_CONFIG_PATH=/dev/null \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} \
          superego --version
    
    - name: Test container health check
      run: |
        # Start container in background
        container_id=$(docker run -d --platform linux/amd64 \
          -p 8080:8000 \
          -e SUPEREGO_CONFIG_PATH=/dev/null \
          -e SUPEREGO_PORT=8000 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }})
        
        # Wait for container to start
        echo "Waiting for container to start..."
        sleep 30
        
        # Check health endpoint
        echo "Testing health endpoint..."
        curl -f http://localhost:8080/health || (docker logs $container_id && exit 1)
        
        # Clean up
        docker stop $container_id
        docker rm $container_id